{"version":3,"sources":["../node_modules/.pnpm/tsup@8.0.2_typescript@5.4.5/node_modules/tsup/assets/cjs_shims.js","../index.ts"],"sourcesContent":["// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL('file:' + __filename).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n","#!/usr/bin/env node\n\nimport { glob } from 'glob';\nimport { cp, readFile, writeFile } from 'node:fs/promises';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport color from 'picocolors';\nimport prompts from 'prompts';\nimport yargs from 'yargs';\nimport { hideBin } from 'yargs/helpers';\n\n// List of templates\nconst TEMPLATES = [\n  {\n    title: 'Next.js + ESLint + Prettier + TypeScript',\n    value: 'next-ts',\n  },\n  {\n    title: 'Next.js + Tailwind CSS + ESLint + Prettier + TypeScript',\n    value: 'next-ts-tw',\n  },\n  {\n    title: 'React (vite) + ESLint + Prettier + TypeScript',\n    value: 'react-ts',\n  },\n  {\n    title: 'React (vite) + Tailwind CSS + ESLint + Prettier + TypeScript',\n    value: 'react-ts-tw',\n  },\n  {\n    title: 'Node.js + ESLint + Prettier + TypeScript',\n    value: 'node-ts',\n  },\n  {\n    title: 'Vanilla + ESLint + Prettier + TypeScript',\n    value: 'vanilla-ts',\n  },\n  {\n    title: 'Vanilla + Tailwind CSS + ESLint + Prettier + TypeScript',\n    value: 'vanilla-ts-tw',\n  },\n];\n\n// Specify CLI arguments\nconst args = yargs(hideBin(process.argv)).options({\n  name: {\n    alias: 'n',\n    type: 'string',\n    description: 'Name of the project',\n  },\n  template: {\n    alias: 't',\n    type: 'string',\n    description: 'Template to use',\n  },\n});\n\n// Override arguments passed on the CLI\nprompts.override(args.argv);\n\nasync function main() {\n  const {\n    _: [initialName, initialProject],\n  } = await args.argv;\n\n  const project = await prompts(\n    [\n      {\n        type: 'text',\n        name: 'name',\n        message: 'What is the name of your project?',\n        initial: initialName || 'my-project',\n        validate: (value) => {\n          if (value.match(/[^a-zA-Z0-9-_]+/g)) {\n            return 'Project name can only contain letters, numbers, dashes and underscores.';\n          }\n          return true;\n        },\n      },\n      {\n        type: 'select',\n        name: 'template',\n        message: 'Select a framework:',\n        initial: initialProject || 0,\n        choices: TEMPLATES,\n      },\n    ],\n    {\n      onCancel: () => {\n        console.log('\\nBye ðŸ‘‹\\n');\n        process.exit(0);\n      },\n    },\n  );\n\n  // Get the template folder for the selected template\n  const template = path.join(\n    path.dirname(fileURLToPath(import.meta.url)),\n    'templates',\n    project.template,\n  );\n\n  // Get the destination folder for the project\n  const destination = path.join(process.cwd(), project.name);\n\n  // Copy files from the template folder to the current directory\n  await cp(template, destination, { recursive: true });\n\n  // Get all files from the destination directory\n  const files = await glob('**/*', { nodir: true, cwd: destination, absolute: true });\n\n  // Read each file and replace the template variables\n  for await (const file of files) {\n    const data = await readFile(file, 'utf8');\n    const draft = data.replace(/{{name}}/g, project.name);\n\n    await writeFile(file, draft, 'utf-8');\n  }\n\n  // Log outro message\n  console.log(`âœ¨ Project created âœ¨`);\n  console.log(`\\n${color.yellow('Next steps:')}`);\n  console.log(`\\n${color.green('cd')} ${project.name}`);\n  console.log(`${color.green('pnpm')} install`);\n  console.log(`${color.green('pnpm')} dev`);\n  console.log('\\n---\\n');\n  console.log(`Questions ðŸ‘€? ${color.underline(color.cyan('https://x.com/javalce29'))}`);\n}\n\nmain().catch(console.error);\n"],"mappings":"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","names":["yargs","prompts","path","color"]}